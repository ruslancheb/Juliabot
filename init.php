<?php
#Время
if ($pruju==3){$time_start=microtime_float();};//Для того чтобы не выводить время выполнения внутренней работы
$возврат=array();
$otvez=$otve;//Копирование текста для вывода в целом варианте пользователю как исходного текста обработки
#Вывод стартовых переменных из памяти
$per2=mysql_fetch_array(mysql_query("SELECT * FROM pk WHERE n=1"));
$per2p=$per2['p'];
//В принципе для частиц нужно лишь знать сам факт их существования
#Часто употребляемые слова и частицы
$koyr=array();
$слова=array();
$порядок_действий=array();

//Паттерны
$filename=$_SERVER['DOCUMENT_ROOT'].'/privet/viras/main.jul';
$handle = fopen($filename,'r');
$contents = fread($handle, filesize($filename));
fclose($handle);
$п=unserialize($contents);


$koy=mysql_query("SELECT s,n,t,c,p,w,r,l,kod,sinonyms FROM p");
do{
if(!empty($koyr['s']))
{
$koren=$koyr['s'];
$слова[$koren]=array(
'n'=>$koyr['n'],
't'=>$koyr['t'],
'c'=>$koyr['c'],
'p'=>$koyr['p'],
'w'=>$koyr['w'],
'r'=>$koyr['r'],
'l'=>$koyr['l'],
'kod'=>$koyr['kod']
);
$синонимы[$koren]=unserialize($koyr['sinonyms']);

}
}
while($koyr=mysql_fetch_array($koy));


#Слова
$koyr=array();
$слова2=array();
$koy=mysql_query("SELECT n,k,t,v,rod,sinonyms FROM slova_korni_typ");
do{
if(!empty($koyr['k']))
{
/*Определение рода */ 
if($koyr['rod']=='m')
{
$koyr['rod']=1;
}
elseif($koyr['rod']=='f')
{
$koyr['rod']=2;
}
elseif($koyr['rod']=='n')
{
$koyr['rod']=3;
}
/*Определение рода 2*/ 
$koren=$koyr['k'];
$слова2[$koren]=array(
'n'=>$koyr['n'],
'v'=>$koyr['v'],
't'=>$koyr['t'],
'rod'=>$koyr['rod']
);
$синонимы[$koren]=unserialize($koyr['sinonyms']);
if($koren=='дела'){
test(12,__LINE__);
$массив=unserialize($koyr['sinonyms']);
print_r($массив);
test(34,__LINE__);
};
}
}
while($koyr=mysql_fetch_array($koy));
//test($слова);
#Функции слов
//include 'text1/slova.php';
$functions=get_defined_functions();
$functions['internal']=array_flip($functions['internal']);
$functions['user']=array_flip($functions['user']);
#Окончания русских слов
//Существительные :падеж,число
$su[11]=array("11"=>"а","12"=>"ы","120"=>"и","21"=>"ы","22"=>"0","31"=>"е","32"=>"ам","41"=>"у","42"=>"0","51"=>"ой","52"=>"ами","61"=>"е","62"=>"ах");
$su[12]=array("11"=>"я","12"=>"и","21"=>"и","220"=>"0","22"=>"й","31"=>"е","32"=>"ям","41"=>"ю","42"=>"и","51"=>"ей","52"=>"ями","61"=>"е","62"=>"ях"); 
$su[13]=array("11"=>"0","12"=>"и","120"=>"ы","21"=>"а","22"=>"ов","31"=>"у","32"=>"ам","41"=>"0","42"=>"а","51"=>"ом","52"=>"ами","61"=>"е","62"=>"ах"); 
$su[14]=array("11"=>"ь","12"=>"и","21"=>"я","220"=>"ей","22"=>"ев","31"=>"ю","32"=>"ям","41"=>"ь","42"=>"и","51"=>"ем","52"=>"ями","61"=>"е","62"=>"ях"); 
$su[15]=array("11"=>"о","12"=>"а","21"=>"а","22"=>"0","31"=>"у","32"=>"ам","41"=>"о","42"=>"а","51"=>"ом","52"=>"ами","61"=>"е","62"=>"ах"); 
$su[16]=array("11"=>"е","12"=>"я","21"=>"я","220"=>"ей","22"=>"й","31"=>"ю","32"=>"ям","41"=>"е","42"=>"я","51"=>"ем","52"=>"ями","610"=>"е","61"=>"и","62"=>"ях"); 
$su[17]=array("11"=>"ь","12"=>"и","21"=>"и","220"=>"ей","22"=>"й","31"=>"и","32"=>"ям","41"=>"ь","42"=>"и","51"=>"ю","52"=>"ями","61"=>"и","62"=>"ях");
//Глаголы : время,лицо,число,род
/*Писать*/ $su[21]=array("1110"=>"ть","111"=>"л","112"=>"ли","121"=>"л","122"=>"ли","1311"=>"л","1312"=>"ла","1313"=>"ло","132"=>"ли","211"=>"у","212"=>"ем","221"=>"ешь","222"=>"ете","231"=>"ет","232"=>"ут","311"=>"","312"=>"","321"=>"","322"=>"","331"=>"","332"=>"","22101"=>"и","22201"=>"ите");
/*Делать*/ $su[22]=array("1110"=>"ть","111"=>"л","112"=>"ли","121"=>"л","122"=>"ли","1311"=>"л","1312"=>"ла","1313"=>"ло","132"=>"ли","211"=>"ю","212"=>"ем","221"=>"ешь","222"=>"ете","231"=>"ет","232"=>"ют","311"=>"","312"=>"","321"=>"","322"=>"","331"=>"","332"=>"","22101"=>"й","22201"=>"йте");
/*Носить*/ $su[23]=array("1110"=>"ть","111"=>"л","112"=>"ли","121"=>"л","122"=>"ли","1311"=>"л","1312"=>"ла","1313"=>"ло","132"=>"ли","211"=>"у","212"=>"им","221"=>"ишь","222"=>"ите","231"=>"ит","232"=>"ат","311"=>"","312"=>"","321"=>"","322"=>"","331"=>"","332"=>"","22101"=>"и","22201"=>"ите"); 
/*Строить*/$su[24]=array("1110"=>"ть","111"=>"л","112"=>"ли","121"=>"л","122"=>"ли","1311"=>"л","1312"=>"ла","1313"=>"ло","132"=>"ли","211"=>"ю","212"=>"им","221"=>"ишь","222"=>"ите","231"=>"ит","232"=>"ят","311"=>"","312"=>"","321"=>"","322"=>"","331"=>"","332"=>"","22101"=>"й","22201"=>"йте");
//Прилагательные :падеж,род,число
$su[31]=array("111"=>"ий","112"=>"ие","121"=>"яя","122"=>"ие","131"=>"ее","132"=>"ие","211"=>"его","212"=>"их","221"=>"ей","222"=>"их","231"=>"его","232"=>"их","311"=>"ему","312"=>"им","321"=>"ей","322"=>"им","331"=>"ему","332"=>"им","411"=>"ий","412"=>"ие","421"=>"юю","422"=>"ые","431"=>"ее","432"=>"ие","511"=>"им","512"=>"ими","521"=>"ей","522"=>"ими","531"=>"им","532"=>"ими","611"=>"ем","612"=>"их","621"=>"ей","622"=>"их","631"=>"ем","632"=>"их");
$su[32]=array("1110"=>"ой","111"=>"ый","112"=>"ые","121"=>"ая","122"=>"ые","131"=>"ое","132"=>"ые","211"=>"ого","212"=>"ых","221"=>"ой","222"=>"ых","231"=>"ого","232"=>"ых","311"=>"ому","312"=>"ым","321"=>"ой","322"=>"ым","331"=>"ому","332"=>"ым","411"=>"ой","411"=>"ый","412"=>"ые","421"=>"ую","422"=>"ие","431"=>"ое","432"=>"ые","511"=>"ым","512"=>"ыми","521"=>"ой","522"=>"ыми","531"=>"ым","532"=>"ыми","611"=>"ом","612"=>"ых","621"=>"ой","622"=>"ых","631"=>"ом","632"=>"ых"); 
//Оптимизатор окончаний
$oks[0]='||0|';
$oks[-1]='||а|ы|е|у|я|и|ю|ь|о|л|й|';
$oks[-2]='||ть|ам|ой|ах|ям|ей|ях|ов|ом|ем|ли|ла|ло|ет|ут|ют|им|ит|ат|ят|ий|ый|ие|ые|яя|ая|ее|ое|их|ых|ей|ой|ым|юю|ую|';
$oks[-3]='||ами|ями|ешь|ишь|ете|ите|йте|его|ого|ему|ому|ими|ыми|';
$oks[-4]='|||';
/*
    * сь — действие, направленное на самого себя или совершаемое субъектом (одеваюсь, умываюсь, обжигаюсь)
    * ся — действие, направленное на самого себя или совершаемое субъектом (одеваться, умываться, жжётся)
    * ти — образует неопределенную форму глагола (инфинитив) (плести, нести, уйти)
    * ть — образует неопределенную форму глагола (инфинитив) (делать, петь, знать)
    * чь — образует неопределенную форму глагола (инфинитив) (печь, прилечь, беречь)
*/


$su[11]=array_flip($su[11]);
$su[12]=array_flip($su[12]);
$su[13]=array_flip($su[13]);
$su[14]=array_flip($su[14]);
$su[15]=array_flip($su[15]);
$su[16]=array_flip($su[16]);
$su[17]=array_flip($su[17]);
$su[21]=array_flip($su[21]);
$su[22]=array_flip($su[22]);
$su[23]=array_flip($su[23]);
$su[24]=array_flip($su[24]);
$su[31]=array_flip($su[31]);
$su[32]=array_flip($su[32]);
#Суффиксы русских слов
/*
-ущ- (читающий)  для глаголов первого спряжения
-ащ- (держащий)  для глаголов второго спряжения
-ом-, -ем- (ведомый)Формы страдательного залога настоящего времени образуются с помощью суффиксов для глаголов первого спряжения 
-им- (гонимый)   настоящего времени для глаголов второго спряжения .
-вш- (державший) Причастия действительного залога образуются с помощью суффикса  для глаголов чья основа оканчивается на гласный .
-ш-  (росший)    С помощью суффикса  такие причастия образуются от глаголов с основой на согласную 
-нн- (от глаголов на -ать: читанный, потерянный) Причастия страдательного залога прошедшего времени образуются с помощью суффиксов, 
-енн-(от глаголов на -эть и -чь: испеченный), 
-т-  (от односложных глаголов: мятый).
$suffiks=array
(
3=>array('ющ'),
);
держащий
носящий
делаемый
носимый
строимый
*/
$osn=0;//Счётчик основ
$chd=0;//Счётчик дополнений
//Причастия:время
$suf[21]=array("1"=>"вш","2"=>"ущ","3"=>"");//1-ый вид глагола
$suf[22]=array("1"=>"вш","2"=>"ющ","3"=>"");//2-ой вид глагола
$suf[23]=array("1"=>"вш","2"=>"ящ","3"=>"");//1-ый вид глагола
$suf[24]=array("1"=>"вш","2"=>"ящ","3"=>"");//2-ой вид глагола
//Оптимизатор суффиксов
$sks[0]='|||';
$sks[-1]='||ш|т|';
$sks[-2]='||ущ|ащ|ющ|ом|им|ем|вш|нн|';
$sks[-3]='||енн|';
$sks[-4]='|||';
/*
#Изменения которые нужно сделать в конструкциях
Необязательные слова в шаблонах
вместо (того чтобы)
*/
/*
#Конструкции
1)(),-это ,это-между скобками аналог "-это",обычно внутри есть существительное,позволяет структуировать существительные PHP (рекурсивный акроним для "PHP: Hypertext Preprocessor") 
2): знак перечисления свойств,хорошо подходит для операторов and 
3): подтип стрелки,показывающей пример
4)вместо *того чтобы*- знак альтернативы действия или перемены местположения
Вместо того чтобы играть,пошёл бы на улицу
есть (действие номер один)[инфинитив глагола] за ним стоит (действие номер два) - or
5)(предмет1) за ним (предмет2) -расположение функций,первая стоит после второй
6)(сущ в им-вин падеже предмет1)отличается от (сущ в родительном падеже предмет2) *тем,что* (сущ в творительном падеже)
три агрумента к функции,уточнение УСЛОВИЯ
7)[,]типа,[,]типо[,таких как],(предмет1 род.падеж)[,] ,  похожих на (предмет1 род.падеж или имен.падеж) -структуирование существительных,их зависмость друг от друга
8)не -отрицание действия выражается в добавление в условие ! или более сложных вещей
9)или -альтернативность действия выражается в операторе or
10)также -дополнитльное действие которое можно выполнить в зависмости от лени (ресурсы или неэффективность действия -СЦ )
 Проверка СЦ на нужность действия
 Вставка if c УСЛОВИЕМ дополнительного действия
11)начальный,конечный -порядок функций (поиск функции с таким названием,у установка указателя редкатирования после неё)
12)после,до,перед,за -порядок функций (поиск функции с таким названием,у установка указателя редкатирования после или до неё)
13)[,]чтобы [,]для того чтобы[,]для  -порядок функций (передняя функция)(задняя функция)
14),чтобы ,для того чтобы,для(задняя функция)*нужно*(передняя функция)-порядок функций (задняя функция)
15)все ,включение дейстявия для всех функций с омощью foreach
16)писать,отредактировать,введите - команда вставки в PHP кода
17)(действие1), поэтому (действие2)-указывает на связь функций и немного на их порядок 
18)Удалите(предмет1) -удалить функцию или переменную или символы
19)знак,символ - если после стоит символ одиночный,то возвращть его
20)Когда (функия1) (функция2)
*/
#События конца предложения
$слова_события_конца_предложения=array('если','то','чтобы','нужно');


//////////Шаблоны/////////////////////
$шаблон['если'][0][1]=array //Шаблонов для одного слова может быть много ,поэтому введён дополнительный массив [0]
(
0=>array(
'kon'=>'если',//Корень слова 'если'
),
1=>array(//Звёздочка обозначает что элемент не обязательный ,чёрточка то что порядок этого элемента от 0 до 3
'tre'=>1,//То есть часть речи = существительное (1)
'pad'=>14,//Падеж либо первый либо четвёртый — либо именительный (1),либо винительный (4)
'int1'=>0,
'int2'=>4,
'*'=>'k',
),
2=>array(//Дополнение
'tre'=>1,
'pad'=>2356,
'int1'=>0,
'int2'=>4,
'*'=>'k',
),
3=>array(
'tre'=>2,//То есть часть речи = глагол (2)
'int1'=>0,
'int2'=>4,
'*'=>'k',
),
4=>array(
'kon'=>'то',
),
5=>array(//Звёздочка обозначает что элемент не обязательный,чёрточка то что порядок этого элемента от 0 до 3
'tre'=>1,//То есть часть речи = существительное (1)
'pad'=>14,//Падеж либо первый либо четвёртый — либо именительный (1),либо винительный (4)
'int1'=>4,
'*'=>'k',
),
6=>array(//Дополнение
'tre'=>1,
'pad'=>2356,
'int1'=>4,
'*'=>'k',
),
7=>array(
'tre'=>2,//То есть часть речи = глагол (2)
'int1'=>4,
'*'=>'k',
),
8=>array(
'kon'=>'y',
),
'typ'=>'k',//Тип шаблона конструкционный
);
$шаблон['чтобы'][0][1]=array //Шаблонов для одного слова может быть много ,поэтому введён дополнительный массив [0]
(
0=>array(
'kon'=>'чтобы',//Корень слова 'если'
),
1=>array(//Звёздочка обозначает что элемент не обязательный ,чёрточка то что порядок этого элемента от 0 до 3
'tre'=>1,//То есть часть речи = существительное (1)
'pad'=>14,//Падеж либо первый либо четвёртый — либо именительный (1),либо винительный (4)
'int1'=>0,
'int2'=>4,
'*'=>'k',
),
2=>array(//Звёздочка обозначает что элемент не обязательный ,чёрточка то что порядок этого элемента от 0 до 3
'tre'=>1,//То есть часть речи = существительное (1)
'pad'=>2356,//Падеж либо первый либо четвёртый — либо именительный (1),либо винительный (4)
'int1'=>0,
'int2'=>4,
'*'=>'k',
),
3=>array(
'tre'=>2,//То есть часть речи = глагол (2)
'int1'=>0,
'int2'=>4,
'*'=>'k',
),
4=>array(
'kon'=>'нужно',
),
5=>array(//Звёздочка обозначает что элемент не обязательный,чёрточка то что порядок этого элемента от 0 до 3
'tre'=>1,//То есть часть речи = существительное (1)
'pad'=>2,//Падеж либо первый либо четвёртый — либо именительный (1),либо винительный (4)
'int1'=>4,
'*'=>'k',
),
6=>array(//Звёздочка обозначает что элемент не обязательный,чёрточка то что порядок этого элемента от 0 до 3
'tre'=>1,//То есть часть речи = существительное (1)
'pad'=>2356,//Падеж либо первый либо четвёртый — либо именительный (1),либо винительный (4)
'int1'=>4,
'*'=>'k',
),
7=>array(
'tre'=>2,//То есть часть речи = глагол (2)
'int1'=>4,
'*'=>'k',
),
8=>array(
'kon'=>'y',
),
'typ'=>'k',//Тип шаблона конструкционный
);


/*
$шаблон['wстрок'][0]=array
(
'd1s'=>'между',
'a'=>'"',
'b'=>'"',
);
$шаблон['wсимвол'][0]=array
(
'd1s'=>'между',
'a'=>'"',
'b'=>'"',
);
$шаблон['wвычисл'][0]=array
(
'crc32'=>'всё равно',
'func'=>'crc32',
'd1'=>'wстрок',
);
//sqrt
$шаблон['wвычисл'][1]=array
(
'wкорн'=>'всё равно',
'd1'=>'wстрок',
'func'=>'sqrt'
);
//sin
$шаблон['wвычисл'][2]=array
(
'1и6'=>'wсинус'
11=>'всё равно'
2=>'wвычисл'
3=>'wсинус'
'wсинус'=>'всё равно',
'func'=>'sin',
'd1'=>'wстрок',
);
$шаблон['wоткро'][0]=array
(
'wфайл'=>'всё равно',
'func'=>'fopen',
);
$шаблон['чтобы'][0]=array
(
'нужно'=>'дальше',
'func'=>'xr_1',
);
$шаблон['wсозда'][0]=array
(
'wфайл'=>'всё равно',
'func'=>'fopen',
);
$шаблон['переменная'][0]=array
(
'равна'=>'всё равно'
);
$шаблон['wарккосинус'][0]=array
(
'wчисл'=>'всё равно',
'func'=>'acos',
);
//chunk_split
$шаблон['wразбива'][0]=array
(
'wстрок'=>'всё равно',
'func'=>'chunk_split',
'd1'=>'wстрок',
);
//ltrim-Удаляет пробелы из начала строки
$шаблон['wудаля'][0]=array
(
'wпробел'=>'всё равно',
'func'=>'ltrim',
'd1'=>'wстрок',
);
//chunk_splits
$шаблон['wразбива'][0]=array
(
'wстрок'=>'всё равно',
'func'=>'chunk_split',
'd1'=>'wстрок',
);
//strpos-Возвращает позицию первого вхождения подстроки 
$шаблон['wнайд'][0]=array
(
'wномер'=>'всё равно',
'func'=>'strpos',
'd1'=>'wсимвол',
'd2'=>'wстрок',
);
$шаблон['-'][0]=array
(
'wномер'=>'всё равно',
'func'=>'strpos',
'd1'=>'wсимвол',
'd2'=>'wстрок',
);
//Мини-правило

// 
//Все существительные

//strpos-Возвращает позицию первого вхождения подстроки 
$шаблон['wслож'][0]=array
(
'wс'=>'всё равно',
'func'=>'slojit',
);

*/



//Для ответа на вопросы
foreach ($шаблон as $k=>$v)
{
foreach ($v as $k2=>$v)
{
$key=$v['func'];
if(!empty($key))$шаблон_перевода_из_кода_в_текст[$key]=$k;
}
}
//test($шаблон_перевода_из_кода_в_текст);
$код_выборки__конца_предложения['переменная']='переменная';
#Настройки
$setting[1]='нет';//Обучение новым словам во время обработки слов
$setting[2]='нет';//Включение обработки собучению связей
$setting[3]='да';//Отключение предположительных слов
$setting[4]='нет';//Отключение обучению новым окончаниям
$setting[5]='нет';//Запись связей в Mysql между членами преложения (обучение)
$setting[6]='нет';//Использовать ли поиск против опечаток
?>